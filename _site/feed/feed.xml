<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>SpecStack</title>
  <subtitle>A free library of software specifications</subtitle>
  <link href="https://prestonp.github.com/feed/feed.xml" rel="self" />
  <link href="https://prestonp.github.com/specstack" />
  <updated>2025-04-04T07:51:37Z</updated>
  <id>https://prestonp.github.com/specstack</id>
  <author>
    <name>Preston Pham</name>
    <email>preston.p@fastmail.com</email>
  </author>
  <entry>
    <title>Real TLA+</title>
    <link href="https://prestonp.github.com/specs/sample_tlaplus/" />
    <updated>2025-04-04T07:51:37Z</updated>
    <id>https://prestonp.github.com/specs/sample_tlaplus/</id>
    <content type="html">&lt;pre&gt;&lt;code&gt;---- MODULE MutualExclusion ----
EXTENDS Integers, TLC

CONSTANTS N  &#92;* Number of processes

VARIABLES pc,    &#92;* Program counter for each process
         flag,   &#92;* Flag array for each process
         turn    &#92;* Whose turn it is

&#92;* TypeOK ensures all variables have valid values and types
TypeOK == /&#92; pc &#92;in [1..N -&gt; {&quot;non-critical&quot;, &quot;trying&quot;, &quot;critical&quot;}]
          /&#92; flag &#92;in [1..N -&gt; {TRUE, FALSE}]
          /&#92; turn &#92;in 1..N

&#92;* Initial state: all processes start outside critical section
Init == /&#92; pc = [i &#92;in 1..N |-&gt; &quot;non-critical&quot;]
        /&#92; flag = [i &#92;in 1..N |-&gt; FALSE]
        /&#92; turn = 1

&#92;* Process i enters critical section if:
&#92;* 1. It&#39;s in &quot;trying&quot; state
&#92;* 2. Its flag is set to TRUE
&#92;* 3. Either it&#39;s its turn OR no other process has its flag set
Enter(i) == /&#92; pc[i] = &quot;trying&quot;
            /&#92; flag[i] = TRUE
            /&#92; &#92;/ turn = i
               &#92;/ &#92;A j &#92;in 1..N: ~flag[j]
            /&#92; pc&#39; = [pc EXCEPT ![i] = &quot;critical&quot;]
            /&#92; UNCHANGED &lt;&lt;flag, turn=&quot;&quot;&gt;&gt;

&#92;* Process i exits critical section and:
&#92;* 1. Returns to non-critical state
&#92;* 2. Clears its flag
&#92;* 3. Passes turn to next process (wraps around to 1 if at N)
Exit(i) == /&#92; pc[i] = &quot;critical&quot;
           /&#92; pc&#39; = [pc EXCEPT ![i] = &quot;non-critical&quot;]
           /&#92; flag&#39; = [flag EXCEPT ![i] = FALSE]
           /&#92; turn&#39; = (turn % N) + 1
           /&#92; UNCHANGED &lt;&lt;&gt;&gt;

&#92;* Process i indicates it wants to enter critical section
Try(i) == /&#92; pc[i] = &quot;non-critical&quot;
          /&#92; pc&#39; = [pc EXCEPT ![i] = &quot;trying&quot;]
          /&#92; UNCHANGED &lt;&lt;flag, turn=&quot;&quot;&gt;&gt;

&#92;* Next state is any process performing any of its actions
Next == &#92;E i &#92;in 1..N: &#92;/ Enter(i)
                            &#92;/ Exit(i)
                            &#92;/ Try(i)

&#92;* Complete specification: initial state and all possible transitions
Spec == Init /&#92; [][Next]_&lt;&lt;pc, flag,=&quot;&quot; turn=&quot;&quot;&gt;&gt;

&#92;* Safety property: no two processes can be in critical section at same time
MutualExclusion == &#92;A i, j &#92;in 1..N: 
                     (i # j) =&gt; ~(pc[i] = &quot;critical&quot; /&#92; pc[j] = &quot;critical&quot;)

Liveness == &lt;&gt; MutualExclusion

&#92;* Testing ligature: =~ =&lt; |= !~ /&#92; &#92;/ &lt;&gt;

&lt;/pc,&gt;&lt;/flag,&gt;&lt;/flag,&gt;&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Real Quint</title>
    <link href="https://prestonp.github.com/specs/sample_quint/" />
    <updated>2025-04-04T07:51:37Z</updated>
    <id>https://prestonp.github.com/specs/sample_quint/</id>
    <content type="html">&lt;pre&gt;&lt;code&gt;// -*- mode: Bluespec; -*-

 /** 
  * Quint specification for a two-layered cache system. The system consists of
  * two cache layers (L1 and L2) that store integer values. Clients can read and
  * write values to the cache. The specification verifies key properties like
  * read-after-write consistency and write-after-write consistency across the
  * cache layers.
  * 
  * Check with:
  *   quint verify &#92;
  *     two_layered_cache.qnt &#92;
  *     --invariant=readAfterWrite,writeAfterWrite &#92;
  *     --temporal=agreement &#92;
  *
  * Or with TLC using the `check_with_tlc.sh` script from this repo:
  *   sh check_with_tlc.sh &#92;
  *     --file ~/projects/quint/examples/classic/distributed/TwoLayeredCache/two_layered_cache.qnt &#92;
  *     --invariant readAfterWrite,writeAfterWrite &#92;
  *     --temporal agreement
  *
  * Preston Pham (@mt40), 2025
  */ 

module two_layered_cache {
    //**********************************************************
    // TYPE DEFINITIONS
    //**********************************************************

    type CacheLayer = str -&gt; int
    type ClientPID = int

    type HistoryEntry = Read(int) | Write(int)

    //**********************************************************
    // CONSTANTS
    //**********************************************************

    // We only consider 1 key in this spec but it is easy to
    // extend to multiple keys if needed
    pure val DefaultKey = &quot;default&quot;
    pure val DefaultExpireDuration = 3
    pure val ClientProcesses: Set[ClientPID] = 1.to(10)
    pure val MaxVal = 1000000
    pure val Expired = -99
    pure val NotFound = -98

    //**********************************************************
    // STATE MACHINE
    // State-dependent definitions and actions
    //**********************************************************

    var l1: CacheLayer
    var l2: CacheLayer
    var num: int

    // Global log of system events. Use to specify correctness
    // properties below.
    var history: List[HistoryEntry]

    //**********************************************************
    // FUNCTIONAL LAYER
    // Values and functions that are state-independent
    //**********************************************************

    pure def isWrite(entry: HistoryEntry): bool = {
        match entry {
            | Write(_) =&gt; true
            | _ =&gt; false
        }
    }

    pure def isRead(entry: HistoryEntry): bool = {
        match entry {
            | Read(_) =&gt; true
            | _ =&gt; false
        }
    }

    pure def value(entry: HistoryEntry): int = {
        match entry {
            | Read(v) =&gt; v
            | Write(v) =&gt; v
        }
    }

    pure def isNotEmpty(l: CacheLayer): bool = {
        l.keys().size() &gt; 0
    }

    //**********************************************************
    // HELPERS
    // Operators for convenience
    //**********************************************************

    action writeL1(v: int): bool = all {
        l1&#39; = l1.put(DefaultKey, v)
    }

    action writeL2(v: int): bool = all {
        l2&#39; = l2.put(DefaultKey, v)
    }

    //**********************************************************
    // ACTIONS
    //**********************************************************

    action writeCache(pid: ClientPID, v: int): bool = all {
        writeL1(v),
        writeL2(v),
        history&#39; = history.append(Write(v))
    }

    action handleNotFound(): bool = all {
        l1&#39; = l1,
        l2&#39; = l2,
        history&#39; = history.append(Read(NotFound))
    }

    action handleL1Found(): bool = {
        val value = l1.get(DefaultKey)
        all {
            l1&#39; = l1,
            l2&#39; = l2,
            history&#39; = history.append(Read(value))
        }
    }

    action handleL2Found(): bool = {
        val value = l2.get(DefaultKey)
        all {
            writeL1(value),
            l2&#39; = l2,
            history&#39; = history.append(Read(value))
        }
    }

    action handleFound(): bool = {
        if (isNotEmpty(l1)) {
            handleL1Found
        } else {
            handleL2Found
        }
    }

    // If val doesn&#39;t exist in L1, read from L2.
    // If val exists in L2, write back to L1 then return.
    // Otherwise, not found (false).
    action readCache(pid: ClientPID): bool = {
        if (isNotEmpty(l1) or isNotEmpty(l2)) {
            handleFound
        } else {
            handleNotFound
        }
    }

    action clientProc = all {
        nondet pid = ClientProcesses.oneOf()
        
        any {
            all {
                num&#39; = num + 1,
                writeCache(pid, num)
            },
            all {
                num&#39; = num,
                readCache(pid),
            }
        },
    }

    // Clear layer 1 data to simulate its
    // volatility. Because in practice, layer 1
    // usually uses memory for storage.
    action l1Expire = all {
        any {
            l1&#39; = l1,
            l1&#39; = Map()
        },
        l2&#39; = l2,
        num&#39; = num,
        history&#39; = history
    }

    action stutter = all {
        num&#39; = num,
        l1&#39; = l1,
        l2&#39; = l2,
        history&#39; = history,
    }

    action init = all {
        num&#39; = 0,
        l1&#39; = Map(),
        l2&#39; = Map(),
        history&#39; = [],
    }

    action step = all {
      // Limit the state space to enable exploration with TLC
      history.length() &lt; 15,
      any {
          clientProc,
          stutter,
          l1Expire
      }
    }

    //**********************************************************
    // CORRECTNESS
    // 1. Safety Properties / Invariants
    //**********************************************************

    // Read the latest write
    val readAfterWrite: bool = {
        val idx = history.indices()
        idx.forall(i =&gt; {
            idx.forall(j =&gt; {
                i &lt; j
                and history[i].isWrite()
                and history[j].isRead()
                implies history[i].value() &lt;= history[j].value()
            })
        })
    }

    // Later write must contain a greater value
    val writeAfterWrite: bool = {
        val idx = history.indices()
        idx.forall(i =&gt; {
            idx.forall(j =&gt; {
                i &lt; j
                and history[i].isWrite()
                and history[j].isWrite()
                implies history[i].value() &lt; history[j].value()
            })
        })
    }

    //**********************************************************
    // CORRECTNESS
    // 2. Liveness Properties / Temporal
    //**********************************************************

    // All layers contain the same latest written value
    temporal agreement: bool = eventually({
        val a = l1.get(DefaultKey)
        val b = l2.get(DefaultKey)
        a == b
    })

    //**********************************************************
    // QUICK TESTS
    //**********************************************************
    // run initAndStepTest = init.then(step)
}&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <title>Understanding TLA+ with a Mutual Exclusion Example</title>
    <link href="https://prestonp.github.com/blog/tlaplus_sample/" />
    <updated>2025-04-03T13:58:16Z</updated>
    <id>https://prestonp.github.com/blog/tlaplus_sample/</id>
    <content type="html">&lt;pre class=&quot;language-tla&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-tla&quot;&gt;---- MODULE MutualExclusion ----
EXTENDS Integers, TLC

CONSTANTS N  &#92;* Number of processes

VARIABLES pc,    &#92;* Program counter for each process
         flag,   &#92;* Flag array for each process
         turn    &#92;* Whose turn it is

&#92;* TypeOK ensures all variables have valid values and types
TypeOK == /&#92; pc &#92;in [1..N -&gt; {&quot;non-critical&quot;, &quot;trying&quot;, &quot;critical&quot;}]
          /&#92; flag &#92;in [1..N -&gt; {TRUE, FALSE}]
          /&#92; turn &#92;in 1..N

&#92;* Initial state: all processes start outside critical section
Init == /&#92; pc = [i &#92;in 1..N |-&gt; &quot;non-critical&quot;]
        /&#92; flag = [i &#92;in 1..N |-&gt; FALSE]
        /&#92; turn = 1

&#92;* Process i enters critical section if:
&#92;* 1. It&#39;s in &quot;trying&quot; state
&#92;* 2. Its flag is set to TRUE
&#92;* 3. Either it&#39;s its turn OR no other process has its flag set
Enter(i) == /&#92; pc[i] = &quot;trying&quot;
            /&#92; flag[i] = TRUE
            /&#92; &#92;/ turn = i
               &#92;/ &#92;A j &#92;in 1..N: ~flag[j]
            /&#92; pc&#39; = [pc EXCEPT ![i] = &quot;critical&quot;]
            /&#92; UNCHANGED &lt;&lt;flag, turn=&quot;&quot;&gt;&gt;

&#92;* Process i exits critical section and:
&#92;* 1. Returns to non-critical state
&#92;* 2. Clears its flag
&#92;* 3. Passes turn to next process (wraps around to 1 if at N)
Exit(i) == /&#92; pc[i] = &quot;critical&quot;
           /&#92; pc&#39; = [pc EXCEPT ![i] = &quot;non-critical&quot;]
           /&#92; flag&#39; = [flag EXCEPT ![i] = FALSE]
           /&#92; turn&#39; = (turn % N) + 1
           /&#92; UNCHANGED &lt;&lt;&gt;&gt;

&#92;* Process i indicates it wants to enter critical section
Try(i) == /&#92; pc[i] = &quot;non-critical&quot;
          /&#92; pc&#39; = [pc EXCEPT ![i] = &quot;trying&quot;]
          /&#92; UNCHANGED &lt;&lt;flag, turn=&quot;&quot;&gt;&gt;

&#92;* Next state is any process performing any of its actions
Next == &#92;E i &#92;in 1..N: &#92;/ Enter(i)
                            &#92;/ Exit(i)
                            &#92;/ Try(i)

&#92;* Complete specification: initial state and all possible transitions
Spec == Init /&#92; [][Next]_&lt;&lt;pc, flag,=&quot;&quot; turn=&quot;&quot;&gt;&gt;

&#92;* Safety property: no two processes can be in critical section at same time
MutualExclusion == &#92;A i, j &#92;in 1..N: 
                     (i # j) =&gt; ~(pc[i] = &quot;critical&quot; /&#92; pc[j] = &quot;critical&quot;)

Liveness == &lt;&gt; MutualExclusion

&#92;* Testing ligature: =~ =&lt; |= !~ /&#92; &#92;/ &lt;&gt;

====&lt;/pc,&gt;&lt;/flag,&gt;&lt;/flag,&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>This is a fifth post (draft)</title>
    <link href="https://prestonp.github.com/blog/fifthpost/" />
    <updated>2023-01-23T00:00:00Z</updated>
    <id>https://prestonp.github.com/blog/fifthpost/</id>
    <content type="html">&lt;p&gt;This is a draft post&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This is my fourth post</title>
    <link href="https://prestonp.github.com/blog/fourthpost/" />
    <updated>2018-09-30T00:00:00Z</updated>
    <id>https://prestonp.github.com/blog/fourthpost/</id>
    <content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://prestonp.github.com/.11ty/image/?src=content%2Fblog%2Ffourthpost%2Fpossum.png&amp;width=350&amp;format=avif&amp;via=transform 350w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://prestonp.github.com/.11ty/image/?src=content%2Fblog%2Ffourthpost%2Fpossum.png&amp;width=350&amp;format=webp&amp;via=transform 350w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://prestonp.github.com/.11ty/image/?src=content%2Fblog%2Ffourthpost%2Fpossum.png&amp;width=350&amp;format=png&amp;via=transform&quot; alt=&quot;A possum parent and two possum kids hanging from the iconic red balloon&quot; width=&quot;350&quot; height=&quot;685&quot;&gt;&lt;/picture&gt;
&lt;h2 id=&quot;section-header&quot;&gt;Section Header&lt;/h2&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This is my third post.</title>
    <link href="https://prestonp.github.com/blog/thirdpost/" />
    <updated>2018-08-24T00:00:00Z</updated>
    <id>https://prestonp.github.com/blog/thirdpost/</id>
    <content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;h3 id=&quot;this-is-a-very-long-heading-that-i-want-to-wrap-this-is-a-very-long-heading-that-i-want-to-wrap-this-is-a-very-long-heading-that-i-want-to-wrap-this-is-a-very-long-heading-that-i-want-to-wrap&quot;&gt;This is a very long heading that I want to wrap This is a very long heading that I want to wrap This is a very long heading that I want to wrap This is a very long heading that I want to wrap&lt;/h3&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// this is a command&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Test with a line break above this line.&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;heading-with-a-link&quot;&gt;Heading with a &lt;a href=&quot;https://prestonp.github.com/blog/thirdpost/#code&quot;&gt;link&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// this is a command
function myCommand() {
	let counter = 0;
	counter++;
}

// Test with a line break above this line.
console.log(&#39;Test&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;section-header&quot;&gt;Section Header&lt;/h2&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This is my second post with a much longer title.</title>
    <link href="https://prestonp.github.com/blog/secondpost/" />
    <updated>2018-07-04T00:00:00Z</updated>
    <id>https://prestonp.github.com/blog/secondpost/</id>
    <content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;h2 id=&quot;section-header&quot;&gt;Section Header&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://prestonp.github.com/blog/firstpost/&quot;&gt;First post&lt;/a&gt;
&lt;a href=&quot;https://prestonp.github.com/blog/thirdpost/&quot;&gt;Third post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This is my first post.</title>
    <link href="https://prestonp.github.com/blog/firstpost/" />
    <updated>2018-05-01T00:00:00Z</updated>
    <id>https://prestonp.github.com/blog/firstpost/</id>
    <content type="html">&lt;p&gt;Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.&lt;/p&gt;
&lt;p&gt;Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.&lt;/p&gt;
&lt;h2 id=&quot;section-header&quot;&gt;Section Header&lt;/h2&gt;
&lt;p&gt;Capitalize on low hanging fruit to identify a ballpark value added activity to beta test. Override the digital divide with additional clickthroughs from DevOps. Nanotechnology immersion along the information highway will close the loop on focusing solely on the bottom line.&lt;/p&gt;
&lt;pre class=&quot;language-diff-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-diff-js&quot;&gt;&lt;span class=&quot;token unchanged language-js&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// this is a command&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myCommand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted language-js&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token deleted-sign deleted language-js&quot;&gt;&lt;span class=&quot;token prefix deleted&quot;&gt;-&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token unchanged language-js&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;  counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-js&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// Test with a line break above this line.&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>